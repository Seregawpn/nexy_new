"""
Nexy AI Assistant - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–¢–æ–ª—å–∫–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SimpleModuleCoordinator
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ)
CLIENT_ROOT = Path(__file__).parent
sys.path.insert(0, str(CLIENT_ROOT))
sys.path.insert(0, str(CLIENT_ROOT / "modules"))
sys.path.insert(0, str(CLIENT_ROOT / "integration"))

# --- –†–∞–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pydub/ffmpeg (–¥–æ –ª—é–±—ã—Ö –≤—ã–∑–æ–≤–æ–≤ pydub) ---
def init_ffmpeg_for_pydub():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É ffmpeg –¥–ª—è pydub.

    –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞:
    1) PyInstaller onefile: sys._MEIPASS/resources/ffmpeg/ffmpeg
    2) PyInstaller bundle:  Contents/Resources/resources/ffmpeg/ffmpeg
    3) Dev-—Ä–µ–∂–∏–º:           resources/ffmpeg/ffmpeg (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
    """
    try:
        from pydub import AudioSegment  # noqa: F401
    except Exception:
        return

    ffmpeg_path = None
    # 1) onefile (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞)
    if hasattr(sys, "_MEIPASS"):
        cand = Path(getattr(sys, "_MEIPASS")) / "resources" / "ffmpeg" / "ffmpeg"
        if cand.exists():
            ffmpeg_path = cand
    # 2) bundle (.app): .../Contents/MacOS/main.py -> ../Resources/resources/ffmpeg/ffmpeg
    if ffmpeg_path is None:
        macos_dir = Path(__file__).resolve().parent
        resources_ffmpeg = macos_dir.parent / "Resources" / "resources" / "ffmpeg" / "ffmpeg"
        if resources_ffmpeg.exists():
            ffmpeg_path = resources_ffmpeg
    # 3) dev-—Ä–µ–∂–∏–º (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    if ffmpeg_path is None:
        dev_ffmpeg = Path(__file__).resolve().parent / "resources" / "ffmpeg" / "ffmpeg"
        if dev_ffmpeg.exists():
            ffmpeg_path = dev_ffmpeg

    if ffmpeg_path and ffmpeg_path.exists():
        try:
            from pydub import AudioSegment
            os.environ["FFMPEG_BINARY"] = str(ffmpeg_path)
            AudioSegment.converter = str(ffmpeg_path)
        except Exception:
            pass

# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö pydub
init_ffmpeg_for_pydub()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SimpleModuleCoordinator
        from integration.core.simple_module_coordinator import SimpleModuleCoordinator
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        coordinator = SimpleModuleCoordinator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º (run() —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç initialize() –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        await coordinator.run()                                                         
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        loop.close()



                                                                                                 
