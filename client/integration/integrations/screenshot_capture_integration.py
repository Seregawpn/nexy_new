"""
ScreenshotCaptureIntegration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ —Å EventBus
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ PROCESSING –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

import asyncio
import logging
import tempfile
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Dict, Any
import subprocess
import shlex
import os
import datetime

from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler

# –ú–æ–¥—É–ª—å –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
from modules.screenshot_capture.core.screenshot_capture import ScreenshotCapture
from modules.screenshot_capture.core.types import (
    ScreenshotConfig, ScreenshotFormat, ScreenshotQuality, ScreenshotRegion
)

# –ö–æ–Ω—Ñ–∏–≥
from config.unified_config_loader import UnifiedConfigLoader

logger = logging.getLogger(__name__)


@dataclass
class ScreenshotCaptureIntegrationConfig:
    format: str = "jpeg"  # —Ç–æ–ª—å–∫–æ JPEG
    max_width: int = 1920
    max_height: int = 1080
    quality: int = 85
    region: str = "full_screen"  # full_screen|primary_monitor|custom


class ScreenshotCaptureIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª–µ–º ScreenshotCapture"""

    def __init__(
        self,
        event_bus: EventBus,
        state_manager: ApplicationStateManager,
        error_handler: ErrorHandler,
    ):
        self.event_bus = event_bus
        self.state_manager = state_manager
        self.error_handler = error_handler
        self._initialized = False
        self._running = False

        # –°–µ—Å—Å–∏–∏/–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        self._last_session_id: Optional[float] = None
        self._captured_for_session: Optional[float] = None
        self._screen_permission_granted: Optional[bool] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._capture: Optional[ScreenshotCapture] = None
        self._config = self._load_config()
        self._prepared_screens: Dict[float, Dict[str, Any]] = {}
        self._prepare_tasks: Dict[float, asyncio.Task] = {}

    def _load_config(self) -> ScreenshotCaptureIntegrationConfig:
        try:
            loader = UnifiedConfigLoader()
            cfg = loader.get_screen_capture_config()
            return ScreenshotCaptureIntegrationConfig(
                format=str(cfg.get("format", "jpeg")).lower(),
                max_width=int(cfg.get("max_width", 1920)),
                max_height=int(cfg.get("max_height", 1080)),
                quality=int(cfg.get("quality", 85)),
                region=str(cfg.get("region", "full_screen")).lower() if isinstance(cfg.get("region", "full_screen"), str) else "full_screen",
            )
        except Exception:
            return ScreenshotCaptureIntegrationConfig()

    async def initialize(self) -> bool:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∑–∞—Ö–≤–∞—Ç–∞
            try:
                self._capture = ScreenshotCapture()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                logger.info("ScreenshotCaptureIntegration: capture module ready")
            except Exception as e:
                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç bridge/pyobjc) ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ degraded-—Ä–µ–∂–∏–º–µ
                self._capture = None
                logger.warning(f"ScreenshotCaptureIntegration: disabled (module unavailable): {e}")

            # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ‚Äî –¥–∞–∂–µ –≤ degraded-—Ä–µ–∂–∏–º–µ, —á—Ç–æ–±—ã –æ—Ç–¥–∞–≤–∞—Ç—å screenshot.error
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.HIGH)
            await self.event_bus.subscribe("voice.recording_stop", self._on_voice_recording_stop, EventPriority.HIGH)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("üîß ScreenshotCapture: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - app.mode_changed, voice.recording_stop")
            # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–∏–º–∞—Ç—å –±–µ–∑ Screen Recording
            try:
                await self.event_bus.subscribe("permissions.status_checked", self._on_permission_status, EventPriority.MEDIUM)
                await self.event_bus.subscribe("permissions.critical_status", self._on_permissions_critical, EventPriority.MEDIUM)
            except Exception:
                pass

            self._initialized = True
            logger.info("ScreenshotCaptureIntegration initialized")
            # –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                asyncio.create_task(self._cleanup_old_screenshots())
            except Exception:
                pass
            return True
        except Exception as e:
            logger.error(f"Failed to initialize ScreenshotCaptureIntegration: {e}")
            return True  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

    async def start(self) -> bool:
        if not self._initialized:
            logger.error("ScreenshotCaptureIntegration not initialized")
            return False
        if self._running:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Screen Capture –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await self._check_screen_capture_permissions()
        
        self._running = True
        logger.info("ScreenshotCaptureIntegration started")
        return True

    async def stop(self) -> bool:
        self._running = False
        logger.info("ScreenshotCaptureIntegration stopped")
        return True

    def _build_module_config(self) -> ScreenshotConfig:
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç int, –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Enum —É—Ä–æ–≤–Ω–µ–π)
        q = self._config.quality
        if q >= 95:
            quality_enum = ScreenshotQuality.MAXIMUM
        elif q >= 85:
            quality_enum = ScreenshotQuality.HIGH
        elif q >= 70:
            quality_enum = ScreenshotQuality.MEDIUM
        else:
            quality_enum = ScreenshotQuality.LOW

        # –§–æ—Ä–º–∞—Ç ‚Äî —Ç–æ–ª—å–∫–æ JPEG
        fmt = (self._config.format or "jpeg").lower()
        format_enum = ScreenshotFormat.JPEG

        # –†–µ–≥–∏–æ–Ω
        region_map = {
            "full_screen": ScreenshotRegion.FULL_SCREEN,
            "primary_monitor": ScreenshotRegion.PRIMARY_MONITOR,
            "custom": ScreenshotRegion.CUSTOM,
        }
        region_enum = region_map.get(self._config.region, ScreenshotRegion.FULL_SCREEN)

        return ScreenshotConfig(
            format=format_enum,
            quality=quality_enum,
            region=region_enum,
            max_width=1400,
            max_height=900,
            timeout=5.0,
        )

    async def _on_voice_recording_stop(self, event: Dict[str, Any]):
        try:
            data = (event or {}).get("data", {})
            session_id = data.get("session_id")
            self._last_session_id = session_id
            
            logger.info(f"üé§ ScreenshotCapture: –ü–æ–ª—É—á–µ–Ω–æ voice.recording_stop, session_id={session_id}")
            
            # –ü–†–Ø–ú–û–ô –¢–†–ò–ì–ì–ï–†: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏
            # (—ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ PROCESSING)
            if session_id is not None:
                if self._captured_for_session == session_id:
                    logger.debug("ScreenshotCaptureIntegration: already captured for session (voice_stop)")
                    return
                if session_id in self._prepared_screens:
                    logger.info(f"üì∏ ScreenshotCapture: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è session {session_id}")
                    await self._publish_prepared(session_id)
                else:
                    logger.info(f"üì∏ ScreenshotCapture: –ü–†–Ø–ú–û–ô –ó–ê–•–í–ê–¢ –ø–æ voice.recording_stop, session_id={session_id}")
                    await self._capture_once(session_id=session_id)
                
        except Exception as e:
            logger.error(f"ScreenshotCaptureIntegration: error in voice_recording_stop: {e}")

    async def _on_mode_changed(self, event: Dict[str, Any]):
        try:
            data = (event or {}).get("data", {})
            mode = data.get("mode")
            logger.info(f"üîç ScreenshotCapture: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ app.mode_changed - mode={mode} (type: {type(mode)})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º (–º–æ–∂–µ—Ç –±—ã—Ç—å enum –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            if mode == AppMode.LISTENING or mode == "listening" or str(mode) == "listening":
                session_id = self._last_session_id
                if session_id is not None:
                    logger.debug(f"ScreenshotCapture: LISTENING detected, preparing screenshot for session {session_id}")
                    await self._schedule_preparation(session_id)
                return

            if mode != AppMode.PROCESSING and mode != "processing" and str(mode) != "processing":
                logger.debug(f"ScreenshotCapture: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∂–∏–º {mode}, –∂–¥–µ–º PROCESSING")
                return

            sid = self._last_session_id
            if sid is not None and self._captured_for_session == sid:
                logger.debug("ScreenshotCaptureIntegration: already captured for session")
                return
            logger.info(f"üì∏ ScreenshotCaptureIntegration: app entered PROCESSING, session_id={sid}")
            if self._screen_permission_granted is False:
                await self.event_bus.publish("screenshot.error", {
                    "session_id": sid,
                    "error": "permissions_denied",
                })
                logger.info("Screenshot skipped: screen recording permission denied")
                return
            if sid is not None and sid in self._prepared_screens:
                await self._publish_prepared(sid)
            else:
                await self._capture_once(session_id=sid)
        except Exception as e:
            logger.error(f"ScreenshotCaptureIntegration: error in mode_changed: {e}")

    async def _on_state_changed(self, event: Dict[str, Any]):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å–æ–±—ã—Ç–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            new_mode = (event or {}).get("data", {}).get("new_mode")
            # –í —Å—Ç–∞—Ä–æ–º –∏–≤–µ–Ω—Ç–µ StateManager –∫–ª–∞–¥—ë—Ç –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ data
            if new_mode is None and isinstance(event, dict):
                new_mode = event.get("new_mode") or ((event.get("data") or {}).get("new_mode"))
            
            logger.info(f"üîç ScreenshotCapture: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ app.state_changed - new_mode={new_mode} (type: {type(new_mode)})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º (–º–æ–∂–µ—Ç –±—ã—Ç—å enum –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            if new_mode != AppMode.PROCESSING and new_mode != "processing" and str(new_mode) != "processing":
                logger.debug(f"ScreenshotCapture: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∂–∏–º {new_mode} –≤ state_changed, –∂–¥–µ–º PROCESSING")
                return
                
            sid = self._last_session_id
            logger.info(f"üì∏ ScreenshotCaptureIntegration: state_changed‚ÜíPROCESSING, session_id={sid}")
            if self._screen_permission_granted is False:
                await self.event_bus.publish("screenshot.error", {
                    "session_id": sid,
                    "error": "permissions_denied",
                })
                return
            await self._capture_once(session_id=sid)
        except Exception as e:
            logger.error(f"ScreenshotCaptureIntegration: error in state_changed: {e}")

    async def _capture_once(self, session_id: Optional[float]):
        if not self._capture:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Ç–∏–ª–∏—Ç—É screencapture (macOS)
            ok, out_path, meta = await self._fallback_capture_cli()
            if ok and out_path:
                await self.event_bus.publish("screenshot.captured", {
                    "session_id": session_id,
                    "image_path": str(out_path),
                    "format": "jpeg",
                    "width": meta.get("width"),
                    "height": meta.get("height"),
                    "size_bytes": meta.get("size_bytes"),
                    "mime_type": "image/jpeg",
                    "capture_time": 0.0,
                })
                self._captured_for_session = session_id
                logger.info(f"Screenshot (CLI) captured: {out_path}")
            else:
                logger.info("ScreenshotCaptureIntegration: module unavailable, publishing screenshot.error(module_unavailable)")
                await self.event_bus.publish("screenshot.error", {
                    "session_id": session_id,
                    "error": "module_unavailable",
                })
            return
        try:
            await asyncio.sleep(0.05)
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—Ö–≤–∞—Ç (–≤ —Ñ–æ–Ω–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è)
            result = await self._capture.capture_screenshot()
            if result and result.success and result.data:
                await self._store_and_publish(session_id, result)
            else:
                await self.event_bus.publish("screenshot.error", {
                    "session_id": session_id,
                    "error": (result.error if result else "unknown"),
                })
                logger.warning(f"Screenshot capture failed: {(result.error if result else 'unknown')}")
        except Exception as e:
            logger.error(f"ScreenshotCaptureIntegration: unexpected error: {e}")
            await self.event_bus.publish("screenshot.error", {
                "session_id": session_id,
                "error": str(e),
            })

    async def _fallback_capture_cli(self) -> (bool, Optional[Path], Dict[str, Any]):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Ç–∏–ª–∏—Ç—É screencapture (macOS).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, path, meta)."""
        try:
            tmp_dir = Path(tempfile.gettempdir()) / "nexy_screenshots"
            tmp_dir.mkdir(parents=True, exist_ok=True)
            out_path = tmp_dir / f"shot_{int(asyncio.get_event_loop().time()*1000)}.jpg"

            # –ó–∞—Ö–≤–∞—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ –∑–≤—É–∫–∞, –≤ JPEG
            cmd = f"screencapture -x -t jpg {shlex.quote(str(out_path))}"
            proc = await asyncio.create_subprocess_shell(
                cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
            )
            stdout, stderr = await proc.communicate()
            if proc.returncode != 0 or not out_path.exists():
                logger.warning(f"screencapture failed rc={proc.returncode}, err={stderr.decode().strip()}")
                return False, None, {}

            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ä–∞–∑–º–µ—Ä (–º–∞–∫—Å. —Å—Ç–æ—Ä–æ–Ω—ã) —á–µ—Ä–µ–∑ sips
            try:
                max_w = int(self._config.max_width or 0)
                max_h = int(self._config.max_height or 0)
                max_side = max(max_w, max_h)
                if max_side > 0:
                    resize_cmd = f"sips -Z {max_side} {shlex.quote(str(out_path))}"
                    proc2 = await asyncio.create_subprocess_shell(
                        resize_cmd,
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE,
                    )
                    await proc2.communicate()
            except Exception as e:
                logger.debug(f"sips resize skipped/failed: {e}")

            # –ü–æ–ª—É—á–∏–º —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ sips
            width = height = None
            try:
                info_cmd = f"sips -g pixelWidth -g pixelHeight {shlex.quote(str(out_path))}"
                proc3 = await asyncio.create_subprocess_shell(
                    info_cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                )
                out, _ = await proc3.communicate()
                text = out.decode()
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: pixelWidth: 1440
                for line in text.splitlines():
                    if "pixelWidth:" in line:
                        try:
                            width = int(line.split(":")[-1].strip())
                        except Exception:
                            pass
                    if "pixelHeight:" in line:
                        try:
                            height = int(line.split(":")[-1].strip())
                        except Exception:
                            pass
            except Exception as e:
                logger.debug(f"sips info failed: {e}")

            size_bytes = None
            try:
                size_bytes = os.path.getsize(out_path)
            except Exception:
                pass

            meta = {"width": width, "height": height, "size_bytes": size_bytes}
            return True, out_path, meta
        except Exception as e:
            logger.debug(f"CLI capture fallback failed: {e}")
            return False, None, {}

    async def _on_permission_status(self, event: Dict[str, Any]):
        try:
            data = (event or {}).get("data", {})
            perm = data.get("permission")
            status = data.get("status")
            if str(perm) == "screen_capture":
                self._screen_permission_granted = (status == "granted")
        except Exception:
            pass

    async def _on_permissions_critical(self, event: Dict[str, Any]):
        try:
            data = (event or {}).get("data", {})
            perms = data.get("permissions", {}) or {}
            sc = perms.get("screen_capture")
            if sc is not None:
                self._screen_permission_granted = (sc == "granted")
        except Exception:
            pass

    async def _cleanup_old_screenshots(self, ttl_hours: int = 24):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ ttl_hours –∏–∑ tmp –∫–∞—Ç–∞–ª–æ–≥–∞."""
        try:
            base = Path(tempfile.gettempdir()) / "nexy_screenshots"
            if not base.exists():
                return
            cutoff = datetime.datetime.now().timestamp() - ttl_hours * 3600
            removed = 0
            for p in base.glob("shot_*.jpg"):
                try:
                    if p.stat().st_mtime < cutoff:
                        p.unlink()
                        removed += 1
                except Exception:
                    continue
            if removed:
                logger.info(f"ScreenshotCleanup: removed {removed} old files")
        except Exception:
            pass

    def get_status(self) -> Dict[str, Any]:
        return {
            "initialized": self._initialized,
            "running": self._running,
            "last_session_id": self._last_session_id,
            "captured_for_session": self._captured_for_session,
        }

    async def _schedule_preparation(self, session_id: float):
        if session_id in self._prepare_tasks and not self._prepare_tasks[session_id].done():
            return
        if self._screen_permission_granted is False or not self._capture:
            return
        task = asyncio.create_task(self._prepare_screenshot(session_id))
        self._prepare_tasks[session_id] = task
        task.add_done_callback(lambda _: self._prepare_tasks.pop(session_id, None))

    async def _prepare_screenshot(self, session_id: float):
        try:
            result = await asyncio.wait_for(self._capture.capture_screenshot(), timeout=1.0)
            if result and result.success and result.data:
                self._prepared_screens[session_id] = {
                    "result": result,
                    "created": datetime.datetime.now(),
                }
                logger.debug(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è session {session_id}")
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è session {session_id}: {e}")

    async def _publish_prepared(self, session_id: float):
        payload = self._prepared_screens.pop(session_id, None)
        if not payload:
            await self._capture_once(session_id=session_id)
            return
        result = payload.get("result")
        await self._store_and_publish(session_id, result)

    async def _store_and_publish(self, session_id: Optional[float], result):
        tmp_dir = Path(tempfile.gettempdir()) / "nexy_screenshots"
        tmp_dir.mkdir(parents=True, exist_ok=True)
        filename = f"shot_{int(asyncio.get_event_loop().time()*1000)}.jpg"
        out_path = tmp_dir / filename

        import base64
        raw = base64.b64decode(result.data.base64_data)
        out_path.write_bytes(raw)

        size_bytes = None
        try:
            size_bytes = os.path.getsize(out_path)
        except Exception:
            pass

        await self.event_bus.publish("screenshot.captured", {
            "session_id": session_id,
            "image_path": str(out_path),
            "format": "jpeg",
            "width": result.data.width,
            "height": result.data.height,
            "size_bytes": size_bytes,
            "mime_type": "image/jpeg",
            "capture_time": result.capture_time,
        })
        self._captured_for_session = session_id
        logger.info(f"Screenshot captured: {out_path}")
        try:
            asyncio.create_task(self._cleanup_old_screenshots())
        except Exception:
            pass

    async def _check_screen_capture_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Screen Capture"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π preflight API, –±–µ–∑ Bundle ID
            try:
                from Quartz import CGPreflightScreenCaptureAccess  # type: ignore
            except Exception:
                CGPreflightScreenCaptureAccess = None

            granted = False
            if CGPreflightScreenCaptureAccess is not None:
                try:
                    granted = bool(CGPreflightScreenCaptureAccess())
                except Exception:
                    granted = False
            else:
                # –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
                try:
                    from Quartz import CGWindowListCreateImage, kCGWindowListOptionOnScreenOnly, kCGNullWindowID, kCGWindowImageDefault  # type: ignore
                    rect = ((0, 0), (1, 1))
                    img = CGWindowListCreateImage(rect, kCGWindowListOptionOnScreenOnly, kCGNullWindowID, kCGWindowImageDefault)
                    granted = bool(img)
                except Exception:
                    granted = False

            if not granted:
                logger.info("‚ÑπÔ∏è Screen Capture not accessible - screenshots will be disabled")
                self._capture = None
                logger.info("üîÑ ScreenshotCapture disabled due to missing Screen Capture access")
            else:
                logger.info("‚úÖ Screen Capture accessible (preflight/probe succeeded)")
                
        except Exception as e:
            logger.info(f"‚ÑπÔ∏è Screen Capture probe failed: {e}")
            self._capture = None
