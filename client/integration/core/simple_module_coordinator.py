"""
SimpleModuleCoordinator - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Optional, Dict, Any

# –ü—É—Ç–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ main.py - –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º

# –ò–º–ø–æ—Ä—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–ù–ï –º–æ–¥—É–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é!)
from integration.integrations.instance_manager_integration import InstanceManagerIntegration
from integration.integrations.autostart_manager_integration import AutostartManagerIntegration
from integration.integrations.tray_controller_integration import TrayControllerIntegration
from integration.integrations.mode_management_integration import ModeManagementIntegration
from integration.integrations.hardware_id_integration import HardwareIdIntegration, HardwareIdIntegrationConfig
from integration.integrations.grpc_client_integration import GrpcClientIntegration
from integration.integrations.speech_playback_integration import SpeechPlaybackIntegration
from modules.tray_controller.core.tray_types import TrayConfig
from integration.integrations.input_processing_integration import InputProcessingIntegration, InputProcessingConfig
from integration.integrations.voice_recognition_integration import VoiceRecognitionIntegration, VoiceRecognitionConfig
from integration.integrations.permissions_integration import PermissionsIntegration
from modules.permissions.core.types import PermissionConfig
from integration.integrations.updater_integration import UpdaterIntegration
from integration.integrations.network_manager_integration import NetworkManagerIntegration
from modules.network_manager.core.config import NetworkManagerConfig
from integration.integrations.audio_device_integration import AudioDeviceIntegration
from modules.audio_device_manager.core.types import AudioDeviceManagerConfig
from integration.integrations.interrupt_management_integration import InterruptManagementIntegration, InterruptManagementIntegrationConfig
from modules.input_processing.keyboard.types import KeyboardConfig
from integration.integrations.screenshot_capture_integration import ScreenshotCaptureIntegration
from integration.integrations.signal_integration import SignalIntegration
from modules.signals.config.types import PatternConfig
from integration.integrations.signal_integration import SignalsIntegrationConfig
from integration.integrations.welcome_message_integration import WelcomeMessageIntegration
from integration.integrations.voiceover_ducking_integration import VoiceOverDuckingIntegration

# –ò–º–ø–æ—Ä—Ç—ã core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from integration.core.event_bus import EventBus, EventPriority
from integration.core.state_manager import ApplicationStateManager, AppMode
from integration.core.error_handler import ErrorHandler, ErrorSeverity, ErrorCategory

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.unified_config_loader import UnifiedConfigLoader

# –ò–º–ø–æ—Ä—Ç Workflows
from integration.workflows import ListeningWorkflow, ProcessingWorkflow

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
_app_running = False
_user_initiated_shutdown = False

class SimpleModuleCoordinator:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π –¥–ª—è Nexy AI Assistant"""
    
    def __init__(self):
        # Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ)
        self.event_bus: Optional[EventBus] = None
        self.state_manager: Optional[ApplicationStateManager] = None
        self.error_handler: Optional[ErrorHandler] = None
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π)
        self.integrations: Dict[str, Any] = {}
        
        # Workflows (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Ä–µ–∂–∏–º–æ–≤)
        self.workflows: Dict[str, Any] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = UnifiedConfigLoader()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_initialized = False
        self.is_running = False
        # –§–æ–Ω–æ–≤—ã–π asyncio loop –∏ –ø–æ—Ç–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        self._bg_loop = None
        self._bg_thread = None
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            print("\n" + "="*60)
            print("üöÄ SIMPLE MODULE COORDINATOR - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
            print("="*60)
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            print("="*60 + "\n")
            
            # 1. –°–æ–∑–¥–∞–µ–º core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.event_bus = EventBus()
            self.state_manager = ApplicationStateManager()
            self.error_handler = ErrorHandler(self.event_bus)
            print("‚úÖ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 1.1 –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π asyncio loop (–¥–ª—è EventBus/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π)
            self._start_background_loop()

            # 2. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º EventBus –∫ StateManager, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–æ–≤
            try:
                self.state_manager.attach_event_bus(self.event_bus)
                # –§–∏–∫—Å–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π loop –≤ EventBus
                self.event_bus.attach_loop(self._bg_loop)
            except Exception:
                pass
            await self._create_integrations()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            await self._initialize_integrations()
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏...")
            await self._setup_coordination()
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            self.is_initialized = True
            
            print("\n" + "="*60)
            print("‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´!")
            print("="*60)
            print("üéØ –ò–∫–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –º–µ–Ω—é-–±–∞—Ä–µ macOS")
            print("üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∏–∫–æ–Ω–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é")
            print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            print("‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            print("="*60 + "\n")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def _create_integrations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: InstanceManagerIntegration –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú –∏ –ë–õ–û–ö–ò–†–£–Æ–©–ò–ú
            config_data = self.config._load_config()
            instance_config = config_data.get('instance_manager', {})
            
            self.integrations['instance_manager'] = InstanceManagerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=instance_config
            )

            # Hardware ID Integration ‚Äî –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ä–∞–Ω–æ, —á—Ç–æ–±—ã ID –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
            self.integrations['hardware_id'] = HardwareIdIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=None  # –±–µ—Ä—ë—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ unified_config.yaml –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
            )

            # TrayController Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ TrayControllerIntegration
            tray_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['tray'] = TrayControllerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=tray_config
            )
            
            # InputProcessing Integration - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_data = self.config._load_config()
            integrations_cfg = (config_data.get('integrations') or {})
            kbd_cfg = integrations_cfg.get('keyboard')
            input_cfg = integrations_cfg.get('input_processing') or {}

            if kbd_cfg:
                keyboard_config = KeyboardConfig(
                    key_to_monitor=kbd_cfg.get('key_to_monitor', 'space'),
                    short_press_threshold=kbd_cfg.get('short_press_threshold', 0.1),
                    long_press_threshold=kbd_cfg.get('long_press_threshold', 0.3),
                    event_cooldown=kbd_cfg.get('event_cooldown', 0.15),
                    hold_check_interval=kbd_cfg.get('hold_check_interval', 0.03),
                    debounce_time=kbd_cfg.get('debounce_time', 0.02)
                )
                input_config = InputProcessingConfig(
                    keyboard_config=keyboard_config,
                    enable_keyboard_monitoring=input_cfg.get('enable_keyboard_monitoring', True),
                    auto_start=input_cfg.get('auto_start', True),
                    keyboard_backend=kbd_cfg.get('backend', 'auto')
                )
                self.integrations['input'] = InputProcessingIntegration(
                    event_bus=self.event_bus,
                    state_manager=self.state_manager,
                    error_handler=self.error_handler,
                    config=input_config
                )
            else:
                logger.warning("Keyboard integration config not found; skipping input integration")
            
            # Permissions Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ PermissionsIntegration
            permissions_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['permissions'] = PermissionsIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=permissions_config
            )
            
            # Updater Integration - –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            updater_cfg = config_data.get('updater', {})
            
            self.integrations['updater'] = UpdaterIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                config=updater_cfg
            )
            
            # Network Manager Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ NetworkManagerIntegration
            network_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['network'] = NetworkManagerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=network_config
            )
            
            # Audio Device Integration - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ AudioDeviceIntegration
            audio_config = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ unified_config.yaml
            
            self.integrations['audio'] = AudioDeviceIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=audio_config
            )
            
            # Interrupt Management Integration - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            int_cfg_all = (config_data.get('integrations') or {})
            int_cfg = int_cfg_all.get('interrupt_management') or {}
            interrupt_config = InterruptManagementIntegrationConfig(
                max_concurrent_interrupts=int_cfg.get('max_concurrent_interrupts', 1),
                interrupt_timeout=int_cfg.get('interrupt_timeout', 5.0),
                retry_attempts=int_cfg.get('retry_attempts', 3),
                retry_delay=int_cfg.get('retry_delay', 1.0),
                enable_speech_interrupts=int_cfg.get('enable_speech_interrupts', True),
                enable_recording_interrupts=int_cfg.get('enable_recording_interrupts', True),
                enable_session_interrupts=int_cfg.get('enable_session_interrupts', True),
                enable_full_reset=int_cfg.get('enable_full_reset', False)
            )
            
            self.integrations['interrupt'] = InterruptManagementIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=interrupt_config
            )

            # Screenshot Capture Integration (PROCESSING)
            self.integrations['screenshot_capture'] = ScreenshotCaptureIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
            )
            
            # Voice Recognition Integration - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é/–∏–∑ unified_config
            try:
                vrec_cfg_raw = config_data['integrations'].get('voice_recognition', {})
                # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫: –±–µ—Ä–µ–º –∏–∑ STT
                language = self.config.get_stt_language("en-US")
                vrec_config = VoiceRecognitionConfig(
                    timeout_sec=vrec_cfg_raw.get('timeout_sec', 10.0),
                    simulate=vrec_cfg_raw.get('simulate', True),
                    simulate_success_rate=vrec_cfg_raw.get('simulate_success_rate', 0.7),
                    simulate_min_delay_sec=vrec_cfg_raw.get('simulate_min_delay_sec', 1.0),
                    simulate_max_delay_sec=vrec_cfg_raw.get('simulate_max_delay_sec', 3.0),
                    language=language,
                )
            except Exception:
                # Fallback —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
                vrec_config = VoiceRecognitionConfig(language=self.config.get_stt_language("en-US"))

            self.integrations['voice_recognition'] = VoiceRecognitionIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=vrec_config,
            )

            # Mode Management Integration (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤)
            self.integrations['mode_management'] = ModeManagementIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
            )

            # Grpc Client Integration
            self.integrations['grpc'] = GrpcClientIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
            )

            # Speech Playback Integration
            self.integrations['speech_playback'] = SpeechPlaybackIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
            )

            # Signals Integration (audio cues via EventBus -> playback)
            try:
                sig_raw = config_data.get('integrations', {}).get('signals', {})
                patterns_cfg = {}
                for name, p in sig_raw.get('patterns', {}).items():
                    patterns_cfg[name] = PatternConfig(
                        audio=p.get('audio', True),
                        visual=p.get('visual', False),
                        volume=p.get('volume', 0.2),
                        tone_hz=p.get('tone_hz', 880),
                        duration_ms=p.get('duration_ms', 120),
                        cooldown_ms=p.get('cooldown_ms', 300),
                    )
                sig_cfg = SignalsIntegrationConfig(
                    enabled=sig_raw.get('enabled', True),
                    sample_rate=sig_raw.get('sample_rate', 48_000),
                    default_volume=sig_raw.get('default_volume', 0.2),
                    patterns=patterns_cfg or None,
                )
            except Exception:
                sig_cfg = SignalsIntegrationConfig()

            self.integrations['signals'] = SignalIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=sig_cfg,
            )

            # AutostartManagerIntegration - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ LaunchAgent
            autostart_config = config_data.get('autostart', {})
            
            self.integrations['autostart_manager'] = AutostartManagerIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=autostart_config
            )

            # Welcome Message Integration - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            self.integrations['welcome_message'] = WelcomeMessageIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
            )

            # VoiceOver Ducking Integration - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VoiceOver
            config_data = self.config._load_config()
            voiceover_config = config_data.get("accessibility", {}).get("voiceover_control", {})
            self.integrations['voiceover_ducking'] = VoiceOverDuckingIntegration(
                event_bus=self.event_bus,
                state_manager=self.state_manager,
                error_handler=self.error_handler,
                config=voiceover_config
            )

            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: instance_manager, hardware_id, tray, input, permissions, updater, network, audio, interrupt, voice_recognition, screenshot_capture, grpc, speech_playback, signals, autostart_manager, welcome_message, voiceover_ducking")
            
            # 3. –°–æ–∑–¥–∞–µ–º Workflows (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Ä–µ–∂–∏–º–æ–≤)
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ Workflows...")
            
            self.workflows['listening'] = ListeningWorkflow(
                event_bus=self.event_bus
            )
            print("‚úÖ ListeningWorkflow —Å–æ–∑–¥–∞–Ω")
            
            self.workflows['processing'] = ProcessingWorkflow(
                event_bus=self.event_bus
            )
            print("‚úÖ ProcessingWorkflow —Å–æ–∑–¥–∞–Ω")
            
            print("‚úÖ –í—Å–µ Workflows —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            raise
    
    async def _initialize_integrations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PermissionsIntegration
            # —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if 'permissions' in self.integrations:
                print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è permissions (–ü–†–ò–û–†–ò–¢–ï–¢)...")
                success = await self.integrations['permissions'].initialize()
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ permissions")
                    raise Exception(f"Failed to initialize permissions")
                print(f"‚úÖ permissions –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
                await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É TCC –∑–∞–ø—Ä–æ—Å–æ–≤
            
            # –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            for name, integration in self.integrations.items():
                if name == 'permissions':  # –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    continue
                    
                print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {name}...")
                success = await integration.initialize()
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}")
                    raise Exception(f"Failed to initialize {name}")
                print(f"‚úÖ {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Workflows
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Workflows...")
            for name, workflow in self.workflows.items():
                print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è workflow {name}...")
                await workflow.initialize()
                print(f"‚úÖ Workflow {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π/workflows: {e}")
            raise
    
    async def _setup_coordination(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.subscribe("app.startup", self._on_app_startup, EventPriority.HIGH)
            await self.event_bus.subscribe("app.shutdown", self._on_app_shutdown, EventPriority.HIGH)
            await self.event_bus.subscribe("app.mode_changed", self._on_mode_changed, EventPriority.MEDIUM)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.event_bus.subscribe("tray.quit_clicked", self._on_user_quit, EventPriority.HIGH)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.event_bus.subscribe("keyboard.long_press", self._on_keyboard_event, EventPriority.HIGH)
            await self.event_bus.subscribe("keyboard.release", self._on_keyboard_event, EventPriority.HIGH)
            await self.event_bus.subscribe("keyboard.short_press", self._on_keyboard_event, EventPriority.HIGH)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await self.event_bus.subscribe("screenshot.captured", self._on_screenshot_captured, EventPriority.MEDIUM)
                await self.event_bus.subscribe("screenshot.error", self._on_screenshot_error, EventPriority.MEDIUM)
            except Exception:
                pass

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏–æ –¥–ª—è —è–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await self.event_bus.subscribe("audio.device_switched", self._on_audio_device_switched, EventPriority.MEDIUM)
                await self.event_bus.subscribe("audio.device_snapshot", self._on_audio_device_snapshot, EventPriority.MEDIUM)
            except Exception:
                pass
            
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {e}")
            raise
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            if not self.is_initialized:
                print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            if self.is_running:
                print("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            
            print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
            startup_order = [
                'permissions',        # 1. –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è - –ö–†–ò–¢–ò–ß–ù–û!
                'hardware_id',        # 2. –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                'tray',               # 3. GUI –∏ –º–µ–Ω—é-–±–∞—Ä
                'voiceover_ducking',  # 4. VoiceOver Ducking (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç permissions)
                'audio',              # 5. –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ (–ø–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
                'voice_recognition',  # 6. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç audio)
                'screenshot_capture', # 7. –ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç permissions)
                'network',            # 8. –°–µ—Ç–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
                'updater',            # 9. –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                'interrupt',          # 10. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏
                'grpc',               # 11. gRPC –∫–ª–∏–µ–Ω—Ç (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç hardware_id)
                'speech_playback',    # 12. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–µ—á–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç grpc)
                'signals',            # 13. –ê—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª—ã
                'welcome_message',    # 14. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç speech_playback)
                'autostart_manager',  # 15. –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
                'instance_manager',   # 16. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for name in startup_order:
                if name in self.integrations:
                    print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
                    success = await self.integrations[name].start()
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: InstanceManagerIntegration –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    if name == "instance_manager" and not success:
                        print("‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        return False
                    
                    if not success:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
                        return False
                    print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            for name, integration in self.integrations.items():
                if name not in startup_order:
                    print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
                    success = await integration.start()
                    
                    if not success:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}")
                        return False
                    print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ Workflows
            print("üöÄ –ó–∞–ø—É—Å–∫ Workflows...")
            for name, workflow in self.workflows.items():
                print(f"üöÄ –ó–∞–ø—É—Å–∫ workflow {name}...")
                await workflow.start()
                print(f"‚úÖ Workflow {name} –∑–∞–ø—É—â–µ–Ω")
            
            self.is_running = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞
            await self.event_bus.publish("app.startup", {
                "coordinator": "simple_module_coordinator",
                "integrations": list(self.integrations.keys())
            })
            
            print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            if not self.is_running:
                print("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
                return True
            
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.event_bus.publish("app.shutdown", {
                "coordinator": "simple_module_coordinator"
            })
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            for name, integration in self.integrations.items():
                print(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                success = await integration.stop()
                if not success:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}")
                else:
                    print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Workflows
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Workflows...")
            for name, workflow in self.workflows.items():
                print(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ workflow {name}...")
                await workflow.stop()
                print(f"‚úÖ Workflow {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.is_running = False
            print("‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ workflows –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π loop
            try:
                if self._bg_loop and self._bg_loop.is_running():
                    self._bg_loop.call_soon_threadsafe(self._bg_loop.stop)
                if self._bg_thread:
                    self._bg_thread.join(timeout=1.0)
            except Exception:
                pass
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {e}")
            return False
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        global _app_running
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if _app_running or self.is_running:
                print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return
            
            _app_running = True
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            success = await self.initialize()
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            success = await self.start()
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            tray_integration = self.integrations.get('tray')
            if not tray_integration:
                print("‚ùå TrayController –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            app = tray_integration.get_app()
            if not app:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ—è")
                return
            
            print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π –≤ –º–µ–Ω—é-–±–∞—Ä–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º UI-—Ç–∞–π–º–µ—Ä –ü–û–°–õ–ï —Ç–æ–≥–æ –∫–∞–∫ rumps –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º rumps.Timer –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –≤ UI-–ø–æ—Ç–æ–∫–µ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
            import rumps
            def start_timer_callback(_):
                try:
                    tray_integration.start_ui_timer()
                    logger.info("‚úÖ UI-—Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ rumps callback")
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startup_timer –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                    startup_timer.stop()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UI-—Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ callback: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
            # –í rumps.Timer –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ repeat; –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–±—ç–∫–∞
            startup_timer = rumps.Timer(start_timer_callback, 1.0)
            startup_timer.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            app.run()
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            _app_running = False
            await self.stop()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏)
    
    async def _on_app_startup(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ")
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º —á–µ—Ä–µ–∑ EventBus
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª–µ–π!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_app_shutdown(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ")
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º —á–µ—Ä–µ–∑ EventBus
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    async def _on_user_quit(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Quit –≤ –º–µ–Ω—é"""
        global _user_initiated_shutdown
        try:
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Quit")
            _user_initiated_shutdown = True
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.event_bus.publish("app.shutdown", {
                "source": "user.quit",
                "user_initiated": True
            })
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.stop()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
    
    async def _on_mode_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            from integration.core.event_utils import event_data
            data = event_data(event)
            new_mode = data.get("mode", None)
            printable_mode = getattr(new_mode, "value", None) or str(new_mode) if new_mode is not None else "unknown"
            print(f"üîÑ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {printable_mode}")
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}")
    
    async def _on_keyboard_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            from integration.core.event_utils import event_type as _etype
            event_type = _etype(event, "unknown")
            print(f"‚å®Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {event_type}")
            
            # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            
    async def _on_screenshot_captured(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            data = (event or {}).get("data", {})
            path = data.get("image_path")
            width = data.get("width")
            height = data.get("height")
            size_bytes = data.get("size_bytes")
            session_id = data.get("session_id")
            print(f"üñºÔ∏è Screenshot captured: {path} ({width}x{height}, {size_bytes} bytes), session={session_id}")
            logger.info(f"Screenshot captured: path={path}, size={size_bytes}, dims={width}x{height}, session={session_id}")
        except Exception as e:
            logger.debug(f"Failed to log screenshot.captured: {e}")

    async def _on_screenshot_error(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            data = (event or {}).get("data", {})
            err = data.get("error")
            session_id = data.get("session_id")
            print(f"üñºÔ∏è Screenshot error: {err}, session={session_id}")
            logger.warning(f"Screenshot error: {err}, session={session_id}")
        except Exception as e:
            logger.debug(f"Failed to log screenshot.error: {e}")

    async def _on_audio_device_switched(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            data = (event or {}).get("data", {})
            from_device = data.get("from_device")
            to_device = data.get("to_device")
            device_type = data.get("device_type")
            print(f"üîä Audio switched: {from_device} ‚Üí {to_device} [{device_type}]")
            logger.info(f"Audio switched: {from_device} -> {to_device} type={device_type}")
        except Exception as e:
            logger.debug(f"Failed to log audio.device_switched: {e}")

    async def _on_audio_device_snapshot(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        try:
            data = (event or {}).get("data", {})
            current = data.get("current_device")
            device_type = data.get("device_type")
            print(f"üîä Audio device: {current} [{device_type}] (snapshot)")
            logger.info(f"Audio device snapshot: {current} type={device_type}")
        except Exception as e:
            logger.debug(f"Failed to log audio.device_snapshot: {e}")

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        return {
            "is_initialized": self.is_initialized,
            "is_running": self.is_running,
            "core_components": {
                "event_bus": self.event_bus is not None,
                "state_manager": self.state_manager is not None,
                "error_handler": self.error_handler is not None
            },
            "integrations": {
                name: integration.get_status() 
                for name, integration in self.integrations.items()
            }
        }

    def _start_background_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —Å asyncio loop, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ app.run()."""
        import asyncio, threading
        if self._bg_loop and self._bg_thread:
            return
        self._bg_loop = asyncio.new_event_loop()
        def _runner():
            asyncio.set_event_loop(self._bg_loop)
            try:
                self._bg_loop.run_forever()
            finally:
                self._bg_loop.close()
        self._bg_thread = threading.Thread(target=_runner, name="nexy-bg-loop", daemon=True)
        self._bg_thread.start()
        print("üßµ –§–æ–Ω–æ–≤—ã–π asyncio loop –∑–∞–ø—É—â–µ–Ω –¥–ª—è EventBus/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
