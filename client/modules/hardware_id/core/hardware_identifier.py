"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Hardware ID
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ Hardware UUID –¥–ª—è macOS
"""

import logging
from typing import Optional, Dict, Any
from .types import (
    HardwareIdResult, HardwareIdStatus, HardwareIdConfig,
    HardwareIdError, HardwareIdNotFoundError, HardwareIdValidationError
)
from config.unified_config_loader import unified_config
from ..macos.hardware_detector import HardwareDetector
from ..utils.caching import HardwareIdCache
from ..utils.validation import HardwareIdValidator

logger = logging.getLogger(__name__)


class HardwareIdentifier:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Hardware ID"""
    
    def __init__(self, config: Optional[HardwareIdConfig] = None):
        self.config = config or self._get_config_from_unified()
        self.detector = HardwareDetector(timeout=self.config.system_profiler_timeout)
        self.cache = HardwareIdCache(
            cache_file_path=self.config.cache_file_path,
            ttl_seconds=self.config.cache_ttl_seconds
        )
        self.validator = HardwareIdValidator()
        self._cached_result: Optional[HardwareIdResult] = None
    
    def _get_config_from_unified(self) -> HardwareIdConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é hardware_id –∏–∑ unified_config
            config_data = unified_config._load_config()
            hardware_config = config_data.get('hardware_id', {})
            
            return HardwareIdConfig(
                cache_enabled=hardware_config.get('cache_enabled', True),
                cache_file_path=hardware_config.get('cache_file_path', '~/.voice_assistant/hardware_id_cache.json'),
                cache_ttl_seconds=hardware_config.get('cache_ttl_seconds', 86400 * 30),  # 30 –¥–Ω–µ–π
                system_profiler_timeout=hardware_config.get('system_profiler_timeout', 5),
                validate_uuid_format=hardware_config.get('validate_uuid_format', True),
                fallback_to_random=hardware_config.get('fallback_to_random', False)
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ hardware_id: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return HardwareIdConfig()
    
    def get_hardware_id(self, force_regenerate: bool = False) -> HardwareIdResult:
        """
        –ü–æ–ª—É—á–∞–µ—Ç Hardware ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            force_regenerate: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å ID (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)
            
        Returns:
            HardwareIdResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è Hardware ID
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ Hardware ID...")
            
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if not force_regenerate and self.config.cache_enabled:
                cached_result = self._get_cached_id()
                if cached_result:
                    self._cached_result = cached_result
                    logger.info("‚úÖ Hardware ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
                    return cached_result
            
            # –ï—Å–ª–∏ –∫—ç—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ID
            logger.info("üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π Hardware ID...")
            result = self._get_new_hardware_id()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            if result.status == HardwareIdStatus.SUCCESS and self.config.cache_enabled:
                self._save_to_cache(result)
            
            self._cached_result = result
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Hardware ID: {e}")
            return HardwareIdResult(
                uuid="",
                status=HardwareIdStatus.ERROR,
                source="hardware_identifier",
                cached=False,
                error_message=str(e)
            )
    
    def _get_cached_id(self) -> Optional[HardwareIdResult]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç Hardware ID –∏–∑ –∫—ç—à–∞
        
        Returns:
            HardwareIdResult: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None
        """
        try:
            if not self.config.cache_enabled:
                logger.debug("üîç –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return None
            
            cached_result = self.cache.get_cached_uuid()
            if not cached_result:
                logger.debug("üîç –ö—ç—à –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                return None
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.config.validate_uuid_format:
                if not self.validator.validate_hardware_id_result(cached_result):
                    logger.warning("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                    return None
            
            logger.info(f"‚úÖ Hardware ID –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞: {cached_result.uuid[:16]}...")
            return cached_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞: {e}")
            return None
    
    def _get_new_hardware_id(self) -> HardwareIdResult:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π Hardware ID
        
        Returns:
            HardwareIdResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
        """
        try:
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º Hardware UUID
            result = self.detector.detect_hardware_uuid()
            
            if result.status == HardwareIdStatus.SUCCESS:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if self.config.validate_uuid_format:
                    if not self.validator.validate_hardware_id_result(result):
                        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–Ω—ã–π Hardware ID –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                        return HardwareIdResult(
                            uuid="",
                            status=HardwareIdStatus.ERROR,
                            source=result.source,
                            cached=False,
                            error_message="Hardware ID –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
                        )
                
                logger.info(f"‚úÖ Hardware ID –ø–æ–ª—É—á–µ–Ω: {result.uuid[:16]}...")
                return result
            
            elif result.status == HardwareIdStatus.NOT_FOUND:
                logger.warning("‚ö†Ô∏è Hardware UUID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω fallback, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID
                if self.config.fallback_to_random:
                    logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID –∫–∞–∫ fallback...")
                    return self._generate_fallback_uuid()
                else:
                    return result
            
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Hardware ID: {result.error_message}")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ Hardware ID: {e}")
            return HardwareIdResult(
                uuid="",
                status=HardwareIdStatus.ERROR,
                source="hardware_identifier",
                cached=False,
                error_message=str(e)
            )
    
    def _generate_fallback_uuid(self) -> HardwareIdResult:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π UUID –∫–∞–∫ fallback
        
        Returns:
            HardwareIdResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–ª—É—á–∞–π–Ω—ã–º UUID
        """
        try:
            import uuid
            
            random_uuid = str(uuid.uuid4())
            logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π UUID: {random_uuid[:16]}...")
            
            return HardwareIdResult(
                uuid=random_uuid,
                status=HardwareIdStatus.SUCCESS,
                source="fallback",
                cached=False,
                metadata={
                    "fallback": True,
                    "generated_at": self._get_timestamp()
                }
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback UUID: {e}")
            return HardwareIdResult(
                uuid="",
                status=HardwareIdStatus.ERROR,
                source="fallback",
                cached=False,
                error_message=str(e)
            )
    
    def _save_to_cache(self, result: HardwareIdResult) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            if not self.config.cache_enabled:
                logger.debug("üîç –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return False
            
            metadata = result.metadata or {}
            metadata.update({
                "cached_at": self._get_timestamp(),
                "source": result.source,
                "status": result.status.value
            })
            
            success = self.cache.save_uuid_to_cache(result.uuid, metadata)
            if success:
                logger.info("‚úÖ Hardware ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
            return False
    
    def clear_cache(self) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –∫—ç—à
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            success = self.cache.clear_cache()
            if success:
                self._cached_result = None
                logger.info("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return False
    
    def get_cache_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
        """
        try:
            cache_info = self.cache.get_cache_info()
            
            return {
                "exists": cache_info.exists,
                "size_bytes": cache_info.size_bytes,
                "created_at": cache_info.created_at,
                "modified_at": cache_info.modified_at,
                "ttl_remaining": cache_info.ttl_remaining,
                "is_valid": cache_info.is_valid,
                "cache_enabled": self.config.cache_enabled,
                "ttl_seconds": self.config.cache_ttl_seconds
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ: {e}")
            return {"error": str(e)}
    
    def get_hardware_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        """
        try:
            hardware_info = self.detector.detect_hardware_info()
            system_info = self.detector.get_system_info()
            
            return {
                "hardware": hardware_info,
                "system": system_info,
                "config": {
                    "cache_enabled": self.config.cache_enabled,
                    "validate_uuid_format": self.config.validate_uuid_format,
                    "fallback_to_random": self.config.fallback_to_random
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏: {e}")
            return {"error": str(e)}
    
    def validate_hardware_id(self, uuid_str: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Hardware ID
        
        Args:
            uuid_str: UUID –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ UUID –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            return self.validator.validate_uuid(uuid_str)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Hardware ID: {e}")
            return False
    
    def get_validation_info(self, uuid_str: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UUID
        
        Args:
            uuid_str: UUID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        try:
            return self.validator.get_validation_info(uuid_str)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    def _get_timestamp(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π timestamp"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ macOS
            if not self.detector.is_macos():
                logger.warning("‚ö†Ô∏è –ù–µ macOS —Å–∏—Å—Ç–µ–º–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å system_profiler
            if not self.detector.system_profiler.is_available():
                logger.warning("‚ö†Ô∏è system_profiler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à–∞
            if not self.cache.is_cache_available():
                logger.warning("‚ö†Ô∏è –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            logger.info("‚úÖ –ú–æ–¥—É–ª—å hardware_id –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return False
