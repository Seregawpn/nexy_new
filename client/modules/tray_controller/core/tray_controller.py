"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç—Ä–µ—è
"""

import asyncio
import logging
import threading
from typing import Optional, Callable, Dict, Any
from .tray_types import TrayStatus, TrayConfig, TrayMenu, TrayMenuItem, TrayEvent
from config.unified_config_loader import unified_config
from ..macos.tray_icon import MacOSTrayIcon
from ..macos.menu_handler import MacOSTrayMenu

logger = logging.getLogger(__name__)

class TrayController:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç—Ä–µ—è"""
    
    def __init__(self, config: Optional[TrayConfig] = None):
        self.config = config or self._get_config_from_unified()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.tray_icon: Optional[MacOSTrayIcon] = None
        self.tray_menu: Optional[MacOSTrayMenu] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_status = TrayStatus.SLEEPING
        self.is_running = False
        self.event_callbacks: Dict[str, Callable] = {}
    
    def _get_config_from_unified(self) -> TrayConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ unified_config.yaml"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tray_controller –∏–∑ unified_config
            config_data = unified_config._load_config()
            tray_config = config_data.get('tray_controller', {})
            
            return TrayConfig(
                enabled=tray_config.get('enabled', True),
                show_status=tray_config.get('show_status', True),
                show_audio_device=tray_config.get('show_audio_device', True),
                show_quit_option=tray_config.get('show_quit_option', True),
                icon_size=tray_config.get('icon_size', 22),
                menu_font_size=tray_config.get('menu_font_size', 14),
                status_update_interval=tray_config.get('status_update_interval', 1.0)
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ tray_controller: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return TrayConfig()
        
        # –ü–æ—Ç–æ–∫ –¥–ª—è macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self._menu_thread: Optional[threading.Thread] = None
        self._stop_event = threading.Event()
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ç—Ä–µ—è"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrayController")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.tray_icon = MacOSTrayIcon(
                status=self.current_status,
                size=self.config.icon_size
            )
            
            self.tray_menu = MacOSTrayMenu("Nexy")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
            await self._create_default_menu()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self._setup_event_handlers()
            
            logger.info("‚úÖ TrayController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TrayController: {e}")
            return False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ç—Ä–µ—è"""
        try:
            if self.is_running:
                logger.warning("TrayController —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ TrayController")
            
            # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
            icon_path = self.tray_icon.create_icon_file(self.current_status)
            if not icon_path:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = self.tray_menu.create_app(icon_path)
            if not app:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ—è")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.tray_menu.app = app
            
            # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è rumps.App –º–µ–Ω—é –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ create_app();
            # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –º–µ–Ω—é (Status/Output/Quit)
            try:
                await self._create_default_menu()
            except Exception:
                pass

            self.is_running = True
            logger.info("‚úÖ TrayController –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
            logger.info("‚ÑπÔ∏è –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ app.run() –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TrayController: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ç—Ä–µ—è"""
        try:
            if not self.is_running:
                logger.warning("TrayController –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrayController")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
            if self.tray_menu:
                self.tray_menu.quit()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
            self._stop_event.set()
            if self._menu_thread and self._menu_thread.is_alive():
                self._menu_thread.join(timeout=2.0)
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if self.tray_icon:
                self.tray_icon.cleanup()
            
            self.is_running = False
            logger.info("‚úÖ TrayController –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrayController: {e}")
            return False
    
    async def update_status(self, status: TrayStatus) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è"""
        try:
            if not self.is_running:
                logger.warning("TrayController –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {self.current_status.value} ‚Üí {status.value}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            if self.tray_icon:
                icon_path = self.tray_icon.create_icon_file(status)
                if icon_path and self.tray_menu:
                    self.tray_menu.update_icon(icon_path)
            
            self.current_status = status
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_event("status_changed", {
                "status": status.value,
                "previous_status": self.current_status.value
            })
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è: {e}")
            return False
    
    async def show_notification(self, title: str, message: str, subtitle: str = ""):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            if self.tray_menu:
                self.tray_menu.show_notification(title, message, subtitle)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def update_menu_status_text(self, status_text: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Sleeping/Listening/Processing)."""
        try:
            if self.tray_menu:
                self.tray_menu.update_status_text(status_text)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω—é: {e}")

    async def update_menu_output_device(self, device_name: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –≤—ã–≤–æ–¥–∞."""
        try:
            if self.tray_menu:
                self.tray_menu.update_output_device(device_name)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é Output: {e}")
    
    def set_event_callback(self, event_type: str, callback: Callable):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""
        self.event_callbacks[event_type] = callback
    
    async def _create_default_menu(self):
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            menu_items = [
                TrayMenuItem(
                    title="Nexy AI Assistant",
                    enabled=False
                ),
                TrayMenuItem(title="", separator=True),
                TrayMenuItem(
                    title="Status: Waiting",
                    enabled=False
                ),
                TrayMenuItem(
                    title="Output: Unknown",
                    enabled=False
                ),
                TrayMenuItem(title="", separator=True),
                TrayMenuItem(
                    title="Check for Updates...",
                    action=self._on_check_updates_clicked
                ),
                TrayMenuItem(title="", separator=True),
                TrayMenuItem(
                    title="Quit",
                    action=self._on_quit_clicked
                )
            ]
            
            menu = TrayMenu(items=menu_items)
            
            if self.tray_menu:
                self.tray_menu.update_menu(menu)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
    
    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        if self.tray_menu:
            self.tray_menu.set_status_callback("icon_click", self._on_icon_clicked)
            self.tray_menu.set_status_callback("icon_right_click", self._on_icon_right_clicked)
    
    def _on_icon_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ"""
        asyncio.create_task(self._publish_event("icon_clicked", {}))
    
    def _on_icon_right_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ"""
        asyncio.create_task(self._publish_event("icon_right_clicked", {}))
    
    def _on_settings_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        asyncio.create_task(self._publish_event("settings_clicked", {}))
    
    def _on_check_updates_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        asyncio.create_task(self._publish_event("updater.check_manual", {}))
    
    def _on_about_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        asyncio.create_task(self._publish_event("about_clicked", {}))
    
    def _on_quit_clicked(self, sender):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤—ã—Ö–æ–¥—É"""
        # 1) –°–æ–æ–±—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏), —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≤—ã—Ö–æ–¥
        try:
            logger.info("üîö Quit requested via tray menu (user action)")
            asyncio.create_task(self._publish_event("quit_clicked", {}))
            # 2) –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ rumps
            if self.tray_menu:
                self.tray_menu.quit()
        except Exception:
            pass
    
    async def _publish_event(self, event_type: str, data: Dict[str, Any]):
        """–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        try:
            if event_type in self.event_callbacks:
                callback = self.event_callbacks[event_type]
                if asyncio.iscoroutinefunction(callback):
                    await callback(event_type, data)
                else:
                    callback(event_type, data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
    
    def _run_menu_thread(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if self.tray_menu and self.tray_menu.app:
                # rumps –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                # –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                logger.info("‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –º–µ–Ω—é: {e}")
    
    def get_status(self) -> TrayStatus:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
        return self.current_status
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""
        return self.tray_icon is not None and self.tray_menu is not None
    
    def get_app(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ rumps –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tray_menu and self.tray_menu.app:
            return self.tray_menu.app
        return None
    
    def run_app(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.tray_menu and self.tray_menu.app:
            self.tray_menu.app.run()
