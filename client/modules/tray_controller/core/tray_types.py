"""
–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tray Controller
"""

from enum import Enum
from dataclasses import dataclass
from typing import Optional, Dict, Any, List, Callable
import base64

class TrayStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∂–∏–º–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
    SLEEPING = "sleeping"         # –°–ø—è—â–∏–π —Ä–µ–∂–∏–º - —Å–µ—Ä—ã–π –∫—Ä—É–∂–æ–∫
    LISTENING = "listening"       # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ - —Å–∏–Ω–∏–π –∫—Ä—É–∂–æ–∫ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
    PROCESSING = "processing"     # –û–±—Ä–∞–±–æ—Ç–∫–∞ - –∂–µ–ª—Ç—ã–π –∫—Ä—É–∂–æ–∫ —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º

class TrayIconType(Enum):
    """–¢–∏–ø—ã –∏–∫–æ–Ω–æ–∫"""
    CIRCLE = "circle"            # –ü—Ä–æ—Å—Ç–æ–π –∫—Ä—É–∂–æ–∫
    PULSING = "pulsing"          # –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –∫—Ä—É–∂–æ–∫
    ROTATING = "rotating"        # –í—Ä–∞—â–∞—é—â–∏–π—Å—è –∫—Ä—É–∂–æ–∫
    STATIC = "static"           # –°—Ç–∞—Ç–∏—á–Ω–∞—è –∏–∫–æ–Ω–∫–∞

@dataclass
class TrayIcon:
    """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç—Ä–µ—è"""
    status: TrayStatus
    icon_type: TrayIconType
    color: str                   # HEX —Ü–≤–µ—Ç
    size: int = 16              # –†–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    data: Optional[bytes] = None # –î–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è)
    
    def get_base64_data(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ base64"""
        if self.data:
            return base64.b64encode(self.data).decode('utf-8')
        return ""

@dataclass
class TrayMenuItem:
    """–≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é —Ç—Ä–µ—è"""
    title: str
    action: Optional[Callable] = None
    enabled: bool = True
    separator: bool = False
    submenu: Optional['TrayMenu'] = None
    shortcut: Optional[str] = None
    icon: Optional[str] = None

@dataclass
class TrayMenu:
    """–ú–µ–Ω—é —Ç—Ä–µ—è"""
    items: List[TrayMenuItem]
    title: Optional[str] = None

@dataclass
class TrayConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–µ—è"""
    enabled: bool = True
    show_status: bool = True
    show_audio_device: bool = True
    show_quit_option: bool = True
    show_menu: bool = True
    enable_click_events: bool = True
    enable_right_click: bool = True
    auto_hide: bool = False
    animation_speed: float = 0.5
    icon_size: int = 16
    menu_font_size: int = 13
    status_update_interval: float = 1.0
    enable_sound: bool = False
    debug_mode: bool = False

@dataclass
class TrayEvent:
    """–°–æ–±—ã—Ç–∏–µ —Ç—Ä–µ—è"""
    event_type: str
    data: Optional[Dict[str, Any]] = None
    timestamp: float = 0.0
    source: str = "tray_controller"

class TrayIconGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç—Ä–µ—è"""
    
    @staticmethod
    def create_circle_icon(status: TrayStatus, size: int = 16) -> TrayIcon:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É-–∫—Ä—É–∂–æ–∫"""
        colors = {
            TrayStatus.SLEEPING: "#808080",      # –°–µ—Ä—ã–π
            TrayStatus.LISTENING: "#007AFF",     # –°–∏–Ω–∏–π
            TrayStatus.PROCESSING: "#FF9500"     # –ñ–µ–ª—Ç—ã–π
        }
        
        # üéØ TRAY DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏
        print(f"üéØ TRAY DEBUG: TrayIconGenerator.create_circle_icon status={status} (type: {type(status)})")
        print(f"üéØ TRAY DEBUG: Available colors: {colors}")
        print(f"üéØ TRAY DEBUG: Selected color: {colors.get(status, 'NOT_FOUND')}")
        
        icon_types = {
            TrayStatus.SLEEPING: TrayIconType.STATIC,
            TrayStatus.LISTENING: TrayIconType.PULSING,
            TrayStatus.PROCESSING: TrayIconType.ROTATING
        }
        
        return TrayIcon(
            status=status,
            icon_type=icon_types[status],
            color=colors[status],
            size=size
        )
    
    @staticmethod
    def create_svg_icon(status: TrayStatus, size: int = 16) -> str:
        """–°–æ–∑–¥–∞—Ç—å SVG –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è"""
        colors = {
            TrayStatus.SLEEPING: "#808080",
            TrayStatus.LISTENING: "#007AFF", 
            TrayStatus.PROCESSING: "#FF9500"
        }
        
        color = colors[status]
        
        # –ò–¥–µ–∞–ª—å–Ω–æ –∫—Ä—É–≥–ª—ã–π SVG –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        center = size // 2
        radius = center - 1  # –û—Å—Ç–∞–≤–ª—è–µ–º 1 –ø–∏–∫—Å–µ–ª—å –æ—Ç –∫—Ä–∞—è
        
        svg = f'''<svg width="{size}" height="{size}" xmlns="http://www.w3.org/2000/svg">
            <circle cx="{center}" cy="{center}" r="{radius}" fill="{color}" stroke="none"/>
        </svg>'''
        
        return svg
