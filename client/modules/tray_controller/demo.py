"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Tray Controller Module
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import sys
import os

# –ü—É—Ç–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ main.py - –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º

from core.tray_controller import TrayController
from core.tray_types import TrayStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def demo_tray_controller():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Tray Controller"""
    try:
        print("\n" + "="*60)
        print("NEXY AI - TRAY CONTROLLER DEMO")
        print("="*60)
        print("This demo shows the Tray Controller functionality")
        print("Look for the 'Nexy AI' icon in your menu bar")
        print("="*60 + "\n")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        tray_controller = TrayController()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        logger.info("üîß Initializing Tray Controller...")
        success = await tray_controller.initialize()
        if not success:
            logger.error("‚ùå Failed to initialize Tray Controller")
            return
        
        # –ó–∞–ø—É—Å–∫
        logger.info("üöÄ Starting Tray Controller...")
        success = await tray_controller.start()
        if not success:
            logger.error("‚ùå Failed to start Tray Controller")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        app = tray_controller.get_app()
        if not app:
            logger.error("‚ùå Failed to get tray app")
            return
        
        print("‚úÖ Tray Controller started successfully!")
        print("üì± Look for 'Nexy AI' icon in menu bar")
        print("üîÑ Status will cycle through: Sleeping ‚Üí Listening ‚Üí Processing")
        print("‚èπÔ∏è  Press Ctrl+C to stop\n")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        async def status_demo():
            statuses = [
                (TrayStatus.SLEEPING, "Sleeping (Gray)"),
                (TrayStatus.LISTENING, "Listening (Blue)"),
                (TrayStatus.PROCESSING, "Processing (Orange)")
            ]
            
            for status, description in statuses:
                logger.info(f"üîÑ Changing status to: {description}")
                await tray_controller.update_status(status)
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        demo_task = asyncio.create_task(status_demo())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        app.run()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Stopping demo...")
    except Exception as e:
        logger.error(f"‚ùå Error in demo: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        try:
            if 'tray_controller' in locals():
                await tray_controller.stop()
                logger.info("‚úÖ Tray Controller stopped")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(demo_tray_controller())










