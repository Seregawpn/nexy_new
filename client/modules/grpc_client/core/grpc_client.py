"""
–û—Å–Ω–æ–≤–Ω–æ–π gRPC –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import asyncio
import logging
from typing import Optional, Dict, Any, AsyncGenerator, Tuple
import importlib
import sys
from pathlib import Path

from .types import ServerConfig, RetryConfig, HealthCheckConfig, RetryStrategy
from .retry_manager import RetryManager
from .connection_manager import ConnectionManager

logger = logging.getLogger(__name__)


class GrpcClient:
    """–û—Å–Ω–æ–≤–Ω–æ–π gRPC –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or self._create_default_config()
        
        # –ú–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.connection_manager = ConnectionManager()
        self.retry_manager = RetryManager(
            RetryConfig(
                max_attempts=self.config.get('max_retry_attempts', 3),
                base_delay=self.config.get('retry_delay', 1.0),
                strategy=RetryStrategy.EXPONENTIAL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            )
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_servers()
        self._setup_callbacks()
    
    def _create_default_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'servers': {
                'local': {
                    'address': '127.0.0.1',
                    'port': 50051,
                    'use_ssl': False,
                    'timeout': 30,
                    'retry_attempts': 3,
                    'retry_delay': 1.0
                },
                'production': {
                    'address': '20.151.51.172',
                    'port': 50051,
                    'use_ssl': False,
                    'timeout': 120,
                    'retry_attempts': 5,
                    'retry_delay': 2.0
                }
            },
            'auto_fallback': True,
            'health_check_interval': 30,
            'connection_timeout': 10,
            'max_retry_attempts': 3,
            'retry_strategy': 'exponential',
            'circuit_breaker_threshold': 5,
            'circuit_breaker_timeout': 60
        }
    
    def _initialize_servers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            servers_config = self.config.get('servers', {})
            for name, server_config in servers_config.items():
                config = ServerConfig(
                    address=server_config['address'],
                    port=server_config['port'],
                    use_ssl=server_config.get('use_ssl', False),
                    timeout=server_config.get('timeout', 30),
                    retry_attempts=server_config.get('retry_attempts', 3),
                    retry_delay=server_config.get('retry_delay', 1.0),
                    max_message_size=server_config.get('max_message_size', 50 * 1024 * 1024)
                )
                self.connection_manager.add_server(name, config)
            
            logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(servers_config)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def _setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç callback'–∏"""
        self.connection_manager.set_connection_callback(self._on_connection_changed)
        self.connection_manager.set_error_callback(self._on_error)
    
    def _on_connection_changed(self, state):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {state.value}")
    
    def _on_error(self, error: Exception, context: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {context}: {error}")
    
    async def connect(self, server_name: Optional[str] = None) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        return await self.connection_manager.connect(server_name)
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.connection_manager.disconnect()
    
    async def switch_server(self, server_name: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"""
        return await self.connection_manager.switch_server(server_name)
    
    async def execute_with_retry(self, operation, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        return await self.retry_manager.execute_with_retry(operation, *args, **kwargs)
    
    def get_connection_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_manager.get_connection_state()
    
    def get_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self.connection_manager.get_metrics()
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        return self.connection_manager.is_connected()
    
    async def stream_audio(self, prompt: str, screenshot_base64: str, screen_info: dict, hardware_id: str) -> AsyncGenerator[Any, None]:
        """–°—Ç—Ä–∏–º–∏–Ω–≥ –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            logger.info(f"üîç screen_info type: {type(screen_info)}")
            logger.info(f"üîç screen_info content: {screen_info}")
            
            if not self.is_connected():
                await self.connect()

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º protobuf-–º–æ–¥—É–ª–∏ —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ server/
            streaming_pb2, streaming_pb2_grpc = self._import_proto_modules()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            if hasattr(screen_info, 'get'):
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                screen_width = screen_info.get('width')
                screen_height = screen_info.get('height')
            elif hasattr(screen_info, 'width') and hasattr(screen_info, 'height'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ width –∏ height
                screen_width = screen_info.width
                screen_height = screen_info.height
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø screen_info: {type(screen_info)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                screen_width = None
                screen_height = None
            
            request = streaming_pb2.StreamRequest(
                prompt=prompt,
                screenshot=screenshot_base64,
                screen_width=screen_width,
                screen_height=screen_height,
                hardware_id=hardware_id,
                session_id=None
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
            async for response in streaming_pb2_grpc.StreamingServiceStub(
                self.connection_manager.channel
            ).StreamAudio(request, timeout=30):
                yield response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∞—É–¥–∏–æ: {e}")
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await self.connection_manager.cleanup()
            logger.info("üßπ GrpcClient –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GrpcClient: {e}")

    def _import_proto_modules(self) -> Tuple[Any, Any]:
        """–ì–∏–±–∫–∏–π –∏–º–ø–æ—Ä—Ç streaming_pb2 –∏ streaming_pb2_grpc.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏, –∑–∞—Ç–µ–º fallback –≤ server/.
        """
        # 1) –ü—ã—Ç–∞–µ–º—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
        try:
            pb2 = importlib.import_module('streaming_pb2')
            pb2_grpc = importlib.import_module('streaming_pb2_grpc')
            return pb2, pb2_grpc
        except Exception:
            pass

        # 2) –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ server/ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ—Ä–µ–Ω—å/ server)
        try:
            repo_root = Path(__file__).resolve().parents[4]
            server_dir = repo_root / 'server'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if server_dir.exists() and str(server_dir) not in sys.path:
                sys.path.append(str(server_dir))
            
            pb2 = importlib.import_module('streaming_pb2')
            pb2_grpc = importlib.import_module('streaming_pb2_grpc')
            return pb2, pb2_grpc
        except Exception as e:
            raise ImportError(f"Unable to import protobuf modules (streaming_pb2*). Error: {e}")
