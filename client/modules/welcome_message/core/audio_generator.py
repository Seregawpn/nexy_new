"""
Welcome Audio Generator

–õ–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator (Azure TTS) —Å fallback –Ω–∞ macOS say.
"""

import asyncio
import logging
import subprocess
import tempfile
import sys
from pathlib import Path
from typing import Optional, Tuple
import numpy as np
from pydub import AudioSegment

from .types import WelcomeConfig

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
try:
    # –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent.parent.parent.parent.parent
    server_path = project_root / "server"
    
    if server_path.exists() and str(server_path) not in sys.path:
        sys.path.append(str(server_path))
    
    from audio_generator import AudioGenerator as ServerAudioGenerator
    from config import Config as ServerConfig
    _SERVER_AUDIO_GEN_AVAILABLE = True
except Exception:
    ServerAudioGenerator = None
    ServerConfig = None
    _SERVER_AUDIO_GEN_AVAILABLE = False

logger = logging.getLogger(__name__)


class WelcomeAudioGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, config: WelcomeConfig):
        self.config = config
        self._cache: Optional[np.ndarray] = None
        self._cache_path: Optional[Path] = None
        
        # –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        self._server_generator: Optional[ServerAudioGenerator] = None
        if _SERVER_AUDIO_GEN_AVAILABLE:
            try:
                self._server_generator = ServerAudioGenerator(voice=config.voice)
                logger.info("‚úÖ [WELCOME_AUDIO] –°–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator –¥–æ—Å—Ç—É–ø–µ–Ω (Azure TTS)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [WELCOME_AUDIO] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: {e}")
                self._server_generator = None
    
    async def generate_audio(self, text: str) -> Optional[np.ndarray]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            numpy –º–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üéµ [WELCOME_AUDIO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è: '{text[:30]}...'")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator (Azure TTS)
            if self._server_generator:
                logger.info("üéµ [WELCOME_AUDIO] –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator (Azure TTS)")
                audio_data = await self._generate_with_server_generator(text)
                if audio_data is not None:
                    logger.info(f"‚úÖ [WELCOME_AUDIO] –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Azure TTS: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
                    return audio_data
                logger.warning("‚ö†Ô∏è [WELCOME_AUDIO] –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback")
            
            # Fallback –Ω–∞ macOS say command
            logger.info("üéµ [WELCOME_AUDIO] –ü—Ä–æ–±—É–µ–º macOS say fallback")
            audio_data = await self._generate_with_macos_say(text)
            if audio_data is not None:
                logger.info(f"‚úÖ [WELCOME_AUDIO] –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ macOS say: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
                return audio_data
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π tone
            logger.warning("‚ö†Ô∏è [WELCOME_AUDIO] macOS say –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback tone")
            audio_data = self._generate_fallback_tone(text)
            if audio_data is not None:
                logger.info(f"‚úÖ [WELCOME_AUDIO] Fallback tone —Å–æ–∑–¥–∞–Ω: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
                return audio_data
            
            logger.error("‚ùå [WELCOME_AUDIO] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_AUDIO] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    async def _generate_with_server_generator(self, text: str) -> Optional[np.ndarray]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator (Azure TTS)"""
        try:
            if not self._server_generator:
                return None
            
            logger.info(f"üéµ [WELCOME_AUDIO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π AudioGenerator –¥–ª—è: '{text[:30]}...'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            audio_data = await self._server_generator.generate_audio(text)
            
            if audio_data is not None:
                # –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (48000Hz 16-bit mono)
                logger.info(f"‚úÖ [WELCOME_AUDIO] –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
                return audio_data
            else:
                logger.warning("‚ö†Ô∏è [WELCOME_AUDIO] –°–µ—Ä–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª None")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_AUDIO] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            return None
    
    async def _generate_with_macos_say(self, text: str) -> Optional[np.ndarray]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ macOS say command"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.aiff', delete=False) as temp_file:
                temp_path = temp_file.name
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ say
                cmd = [
                    'say',
                    '-v', 'Samantha',  # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
                    '-r', '180',       # –°–∫–æ—Ä–æ—Å—Ç—å (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
                    '-o', temp_path,   # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                    text
                ]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0 and Path(temp_path).exists():
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    seg = AudioSegment.from_file(temp_path)
                    
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: 48000Hz mono
                    if seg.frame_rate != self.config.sample_rate:
                        seg = seg.set_frame_rate(self.config.sample_rate)
                    if seg.channels != self.config.channels:
                        seg = seg.set_channels(self.config.channels)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy int16
                    samples = np.array(seg.get_array_of_samples(), dtype=np.int16)
                    
                    logger.info(f"‚úÖ [WELCOME_AUDIO] macOS say —É—Å–ø–µ—à–Ω–æ: {len(samples)} —Å—ç–º–ø–ª–æ–≤, {len(samples)/self.config.sample_rate:.1f}s")
                    return samples
                    
                else:
                    logger.error(f"‚ùå [WELCOME_AUDIO] macOS say –æ—à–∏–±–∫–∞: {result.stderr}")
                    return None
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    Path(temp_path).unlink(missing_ok=True)
                except Exception:
                    pass
                    
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ [WELCOME_AUDIO] macOS say —Ç–∞–π–º–∞—É—Ç 10s")
            return None
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_AUDIO] macOS say –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def _generate_fallback_tone(self, text: str) -> Optional[np.ndarray]:
        """
        Fallback –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π tone
        """
        try:
            logger.info("üéõÔ∏è [WELCOME_AUDIO] –°–æ–∑–¥–∞—é fallback tone")
            
            sr = self.config.sample_rate
            
            # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π tone (1.5 —Å–µ–∫—É–Ω–¥—ã)
            duration_sec = 1.5
            total_samples = int(sr * duration_sec)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–ª–æ–¥–∏—á–Ω—ã–π tone
            t = np.linspace(0, duration_sec, total_samples, endpoint=False, dtype=np.float32)
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–µ–ª–æ–¥–∏—è: –¥–≤–µ –Ω–æ—Ç—ã
            note1_dur = 0.6  # –ü–µ—Ä–≤–∞—è –Ω–æ—Ç–∞
            note2_dur = 0.6  # –í—Ç–æ—Ä–∞—è –Ω–æ—Ç–∞
            pause_dur = 0.3  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏
            
            audio = np.zeros(total_samples, dtype=np.float32)
            
            # –ü–µ—Ä–≤–∞—è –Ω–æ—Ç–∞ (A4 = 440Hz)
            note1_samples = int(sr * note1_dur)
            note1 = 0.3 * np.sin(2 * np.pi * 440 * t[:note1_samples])
            # –ú—è–≥–∫–∏–π fade-in/out
            fade_samples = int(0.05 * sr)  # 50ms fade
            note1[:fade_samples] *= np.linspace(0, 1, fade_samples)
            note1[-fade_samples:] *= np.linspace(1, 0, fade_samples)
            audio[:note1_samples] = note1
            
            # –í—Ç–æ—Ä–∞—è –Ω–æ—Ç–∞ (C5 = 523Hz) –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
            note2_start = int(sr * (note1_dur + pause_dur))
            note2_samples = int(sr * note2_dur)
            if note2_start + note2_samples <= total_samples:
                note2 = 0.3 * np.sin(2 * np.pi * 523 * t[:note2_samples])
                note2[:fade_samples] *= np.linspace(0, 1, fade_samples)
                note2[-fade_samples:] *= np.linspace(1, 0, fade_samples)
                audio[note2_start:note2_start + note2_samples] = note2
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16
            audio_int16 = np.asarray(audio * 32767, dtype=np.int16)
            
            logger.info(f"‚úÖ [WELCOME_AUDIO] Fallback tone —Å–æ–∑–¥–∞–Ω: {len(audio_int16)} —Å—ç–º–ø–ª–æ–≤, {duration_sec:.1f}s")
            return audio_int16
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_AUDIO] Fallback tone –æ—à–∏–±–∫–∞: {e}")
            return None
    
    async def save_audio_to_file(self, audio_data: np.ndarray, output_path: Path) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        
        Args:
            audio_data: numpy –º–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ AudioSegment
            audio_segment = AudioSegment(
                audio_data.tobytes(),
                frame_rate=self.config.sample_rate,
                sample_width=2,  # 16-bit
                channels=self.config.channels
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if output_path.suffix.lower() == '.mp3':
                audio_segment.export(output_path, format="mp3")
            elif output_path.suffix.lower() == '.wav':
                audio_segment.export(output_path, format="wav")
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é WAV
                audio_segment.export(output_path.with_suffix('.wav'), format="wav")
            
            logger.info(f"‚úÖ [WELCOME_AUDIO] –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [WELCOME_AUDIO] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
